module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "stylesheet": parse_stylesheet,
        "charset": parse_charset,
        "import": parse_import,
        "namespace": parse_namespace,
        "media": parse_media,
        "media_list": parse_media_list,
        "medium": parse_medium,
        "page": parse_page,
        "psuedo_page": parse_psuedo_page,
        "font_face": parse_font_face,
        "at_rule": parse_at_rule,
        "at_keyword": parse_at_keyword,
        "block": parse_block,
        "operator": parse_operator,
        "combinator": parse_combinator,
        "unary_operator": parse_unary_operator,
        "property": parse_property,
        "ruleset": parse_ruleset,
        "declaration": parse_declaration,
        "declaration_list": parse_declaration_list,
        "selector_list": parse_selector_list,
        "selector": parse_selector,
        "simple_selector": parse_simple_selector,
        "hash": parse_hash,
        "class": parse_class,
        "element_name": parse_element_name,
        "namespace_prefix": parse_namespace_prefix,
        "element_identifier": parse_element_identifier,
        "attrib": parse_attrib,
        "attrib_operator": parse_attrib_operator,
        "attrib_value": parse_attrib_value,
        "psuedo": parse_psuedo,
        "psuedo_function": parse_psuedo_function,
        "psuedo_parameter": parse_psuedo_parameter,
        "prio": parse_prio,
        "expr": parse_expr,
        "term": parse_term,
        "percentage": parse_percentage,
        "length": parse_length,
        "ems": parse_ems,
        "exs": parse_exs,
        "angle": parse_angle,
        "time": parse_time,
        "freq": parse_freq,
        "number": parse_number,
        "function": parse_function,
        "string": parse_string,
        "string_1": parse_string_1,
        "string_2": parse_string_2,
        "identifier": parse_identifier,
        "uri": parse_uri,
        "url": parse_url,
        "unicoderange": parse_unicoderange,
        "hexcolor": parse_hexcolor,
        "brace_open": parse_brace_open,
        "brace_close": parse_brace_close,
        "bracket_open": parse_bracket_open,
        "bracket_close": parse_bracket_close,
        "paren_open": parse_paren_open,
        "paren_close": parse_paren_close,
        "terminator": parse_terminator,
        "separator": parse_separator,
        "property_separator": parse_property_separator,
        "ignore": parse_ignore,
        "comment": parse_comment,
        "required_space": parse_required_space,
        "name": parse_name,
        "nl": parse_nl,
        "nonascii": parse_nonascii,
        "escape": parse_escape,
        "w": parse_w,
        "h": parse_h,
        "nmchar": parse_nmchar,
        "nmstart": parse_nmstart,
        "unicode": parse_unicode,
        "CHARSET_SYM": parse_CHARSET_SYM,
        "IMPORT_SYM": parse_IMPORT_SYM,
        "NAMESPACE_SYM": parse_NAMESPACE_SYM,
        "MEDIA_SYM": parse_MEDIA_SYM,
        "PAGE_SYM": parse_PAGE_SYM,
        "FONT_FACE_SYM": parse_FONT_FACE_SYM,
        "IMPORTANT_SYM": parse_IMPORTANT_SYM,
        "NUMBER": parse_NUMBER,
        "IDENT": parse_IDENT,
        "S": parse_S,
        "CDO": parse_CDO,
        "CDC": parse_CDC
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "stylesheet";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_stylesheet() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_charset();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_import();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_import();
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_namespace();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_namespace();
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_ruleset();
              if (result4 === null) {
                result4 = parse_media();
                if (result4 === null) {
                  result4 = parse_page();
                  if (result4 === null) {
                    result4 = parse_font_face();
                    if (result4 === null) {
                      result4 = parse_at_rule();
                    }
                  }
                }
              }
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_ruleset();
                if (result4 === null) {
                  result4 = parse_media();
                  if (result4 === null) {
                    result4 = parse_page();
                    if (result4 === null) {
                      result4 = parse_font_face();
                      if (result4 === null) {
                        result4 = parse_at_rule();
                      }
                    }
                  }
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignore();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignore();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, charset, imports, namespaces, contents, post) {
        		return new clasp.model.Stylesheet(charset, imports, namespaces, contents, post)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_charset() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_CHARSET_SYM();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_ignore();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_ignore();
              }
              if (result3 !== null) {
                result4 = parse_terminator();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym, charset, post, terminator) {
        		return new clasp.model.Charset(pre, sym, charset, post, terminator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_import() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_IMPORT_SYM();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 === null) {
              result2 = parse_uri();
            }
            if (result2 !== null) {
              result3 = parse_media_list();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_terminator();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym, uri, media, terminator) {
        		return new clasp.model.Import(pre, sym, uri, media, terminator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_namespace() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NAMESPACE_SYM();
          if (result1 !== null) {
            result2 = parse_identifier();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_string();
              if (result3 === null) {
                result3 = parse_uri();
              }
              if (result3 !== null) {
                result4 = parse_terminator();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym, prefix, uri, terminator) {
        		return new clasp.model.Namespace(pre, sym, prefix, uri, terminator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_media() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_MEDIA_SYM();
          if (result1 !== null) {
            result2 = parse_media_list();
            if (result2 !== null) {
              result3 = parse_brace_open();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ruleset();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ruleset();
                }
                if (result4 !== null) {
                  result5 = parse_brace_close();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym, media, brace_open, rulesets, brace_close) {
        		return new clasp.model.Media(pre, sym, media, brace_open, rulesets, brace_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_media_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_medium();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_separator();
          if (result2 !== null) {
            result3 = parse_medium();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_separator();
            if (result2 !== null) {
              result3 = parse_medium();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        		var list = [head]
        		
        		for (var i=0; i<tail.length; i++)
        		{
        			list = list.concat(tail[i])
        		}
        		
        		return list
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_medium() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, medium) {
        		return new clasp.model.Medium(pre, medium)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_page() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_PAGE_SYM();
          if (result1 !== null) {
            result2 = parse_identifier();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_psuedo_page();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_brace_open();
                if (result4 !== null) {
                  result5 = parse_declaration_list();
                  if (result5 !== null) {
                    result6 = parse_brace_close();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym, identifier, psuedo_page, brace_open, declarations, brace_close) {
        		return new clasp.model.Page(pre, sym, identifier, psuedo_page, brace_open, declarations, brace_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_psuedo_page() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_IDENT();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, value) {
        		return new clasp.model.PsuedoPage(pre, prefix, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_font_face() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_FONT_FACE_SYM();
          if (result1 !== null) {
            result2 = parse_brace_open();
            if (result2 !== null) {
              result3 = parse_declaration_list();
              if (result3 !== null) {
                result4 = parse_brace_close();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym, brace_open, declarations, brace_close) {
        		return new clasp.model.FontFace(pre, sym, brace_open, declarations, brace_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_at_rule() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_at_keyword();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_term();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_term();
          }
          if (result1 !== null) {
            result2 = parse_block();
            if (result2 === null) {
              result2 = parse_terminator();
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, keyword, terms, block) {
        		return new clasp.model.AtRule(keyword, terms, block)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_at_keyword() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 64) {
            result1 = "@";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, name) {
        		return new clasp.model.AtKeyword(pre, prefix, name)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_block() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_brace_open();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ruleset();
            if (result3 === null) {
              result3 = parse_at_rule();
              if (result3 === null) {
                result3 = parse_block();
                if (result3 === null) {
                  result3 = parse_term();
                  if (result3 === null) {
                    result3 = parse_terminator();
                  }
                }
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ruleset();
              if (result3 === null) {
                result3 = parse_at_rule();
                if (result3 === null) {
                  result3 = parse_block();
                  if (result3 === null) {
                    result3 = parse_term();
                    if (result3 === null) {
                      result3 = parse_terminator();
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse_brace_close();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, brace_open, contents, brace_close) {
        		return new clasp.model.Block(pre, brace_open, contents, brace_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_operator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result1 = "/";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 44) {
              result1 = ",";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 === null) {
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_comment();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_comment();
          }
          if (result0 !== null) {
            result1 = parse_required_space();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, result) {
        		return new clasp.model.Operator(result[0], result[1])
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_combinator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 43) {
            result1 = "+";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"+\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result1 = ">";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 === null) {
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_comment();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_comment();
          }
          if (result0 !== null) {
            result1 = parse_required_space();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, result) {
        		return new clasp.model.Combinator(result[0], result[1])
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_unary_operator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 45) {
            result1 = "-";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 43) {
              result1 = "+";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.UnaryOperator(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_property() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.Property(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ruleset() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_selector_list();
          if (result1 !== null) {
            result2 = parse_brace_open();
            if (result2 !== null) {
              result3 = parse_declaration_list();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_brace_close();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, selectors, brace_open, declarations, brace_close) {
        		return new clasp.model.Ruleset(pre, selectors, brace_open, declarations, brace_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declaration() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_property();
          if (result1 !== null) {
            result2 = parse_property_separator();
            if (result2 !== null) {
              result3 = parse_expr();
              if (result3 !== null) {
                result4 = parse_prio();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, declaration) {
        		property = declaration[0]
        		separator = declaration[1]
        		expression = declaration[2]
        		priority = declaration[3]
        		return new clasp.model.Declaration(pre, property, separator, expression, priority, '')
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_declaration_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_declaration();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_terminator();
          if (result2 !== null) {
            result3 = parse_declaration();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_terminator();
            if (result2 !== null) {
              result3 = parse_declaration();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result2 = parse_terminator();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail, terminator) {
        		var list = [head],
        			last = head
        		
        		for (var i=0; i<tail.length; i++)
        		{
        			last.set_terminator(tail[i][0])
        			last = tail[i][1]
        			list.push(last)
        		}
        		
        		if (terminator)
        		{
        			last.set_terminator(terminator)
        		}
        		
        		return list
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_selector_list() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        result0 = parse_percentage();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_selector();
          if (result0 !== null) {
            result1 = [];
            pos2 = clone(pos);
            result2 = parse_separator();
            if (result2 !== null) {
              result3 = parse_selector();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              result2 = parse_separator();
              if (result2 !== null) {
                result3 = parse_selector();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, head, tail) {
          		var list = [head]
          		
          		for (var i=0; i<tail.length; i++)
          		{
          			list = list.concat(tail[i])
          		}
          		
          		return list
          	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_selector() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_simple_selector();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_combinator();
          if (result2 !== null) {
            result3 = parse_simple_selector();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_combinator();
            if (result2 !== null) {
              result3 = parse_simple_selector();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        		var parts = [head]
        		
        		if (tail)
        		{
        			for (var i=0; i<tail.length; i++)
        			{
        				parts = parts.concat(tail[i])
        			}
        		}
        		
        		return new clasp.model.Selector(parts)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_simple_selector() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_element_name();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_hash();
          if (result2 === null) {
            result2 = parse_class();
            if (result2 === null) {
              result2 = parse_attrib();
              if (result2 === null) {
                result2 = parse_psuedo();
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_hash();
            if (result2 === null) {
              result2 = parse_class();
              if (result2 === null) {
                result2 = parse_attrib();
                if (result2 === null) {
                  result2 = parse_psuedo();
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        		tail.unshift(head)
        		return new clasp.model.SimpleSelector(tail) 
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result1 = parse_hash();
          if (result1 === null) {
            result1 = parse_class();
            if (result1 === null) {
              result1 = parse_attrib();
              if (result1 === null) {
                result1 = parse_psuedo();
              }
            }
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_hash();
              if (result1 === null) {
                result1 = parse_class();
                if (result1 === null) {
                  result1 = parse_attrib();
                  if (result1 === null) {
                    result1 = parse_psuedo();
                  }
                }
              }
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, parts) {
          		return new clasp.model.SimpleSelector(parts)
          	})(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_hash() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 35) {
            result1 = "#";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, name) {
        		return new clasp.model.Hash(pre, prefix, name)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_class() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_IDENT();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, name) {
        		return new clasp.model.ClassName(pre, prefix, name)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_element_name() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_namespace_prefix();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_element_identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, prefix, name) {
        		return new clasp.model.ElementName(prefix, name)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_namespace_prefix() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignore();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignore();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 124) {
              result2 = "|";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, inter, combinator) {
        		return new clasp.model.NamespacePrefix(name, inter, combinator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_element_identifier() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 42) {
              result1 = "*";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.Identifier(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_attrib() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_bracket_open();
        if (result0 !== null) {
          result1 = parse_identifier();
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_attrib_operator();
            if (result2 !== null) {
              result3 = parse_attrib_value();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_bracket_close();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, bracket_open, identifier, value, bracket_close) {
        		var value = value || [null,null]
        		return new clasp.model.Attribute(bracket_open, identifier, value[0], value[1], bracket_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_attrib_operator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos.offset, 2) === "~=") {
              result1 = "~=";
              advance(pos, 2);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"~=\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos.offset, 2) === "|=") {
                result1 = "|=";
                advance(pos, 2);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"|=\"");
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.AttributeOperator(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_attrib_value() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_identifier();
          if (result1 === null) {
            result1 = parse_string();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.AttributeValue(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_psuedo() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result2 = ":";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos.offset) === 58) {
                result2 = ":";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 === null) {
              result2 = parse_psuedo_function();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, value) {
        		return new clasp.model.Psuedo(pre, prefix, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_psuedo_function() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = parse_psuedo_parameter();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, parameter) {
        		return new clasp.model.PsuedoFunction(name, parameter)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_psuedo_parameter() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_paren_open();
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result3 = parse_paren_close();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, paren_open, value, paren_close) {
        		return new clasp.model.PsuedoParameter(pre, paren_open, value, paren_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_prio() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_IMPORTANT_SYM();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, sym) {
        		return new clasp.model.Priority(pre, sym)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_expr() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_term();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_operator();
          if (result2 !== null) {
            result3 = parse_term();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_operator();
            if (result2 !== null) {
              result3 = parse_term();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        		var parts = [head]
        		
        		for (var i=0; i<tail.length; i++)
        		{
        			parts = parts.concat(tail[i])
        		}
        		
        		return new clasp.model.Expression(parts)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_term() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_unary_operator();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_percentage();
          if (result1 === null) {
            result1 = parse_length();
            if (result1 === null) {
              result1 = parse_ems();
              if (result1 === null) {
                result1 = parse_exs();
                if (result1 === null) {
                  result1 = parse_angle();
                  if (result1 === null) {
                    result1 = parse_time();
                    if (result1 === null) {
                      result1 = parse_freq();
                      if (result1 === null) {
                        result1 = parse_number();
                        if (result1 === null) {
                          result1 = parse_function();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, unary_operator, value) {
        		var unary_operator = unary_operator || ''
        		return new clasp.model.Term(unary_operator, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_string();
          if (result0 === null) {
            result0 = parse_uri();
            if (result0 === null) {
              result0 = parse_unicoderange();
              if (result0 === null) {
                result0 = parse_hexcolor();
                if (result0 === null) {
                  result0 = parse_identifier();
                }
              }
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, value) {
          		return new clasp.model.Term(null, value)
          	})(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_percentage() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 37) {
              result2 = "%";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, suffix) {
        		return new clasp.model.Percentage(pre, value, suffix)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_length() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "px") {
              result2 = "px";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"px\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "cm") {
                result2 = "cm";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"cm\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 2) === "nm") {
                  result2 = "nm";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"nm\"");
                  }
                }
                if (result2 === null) {
                  if (input.substr(pos.offset, 2) === "in") {
                    result2 = "in";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"in\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.substr(pos.offset, 2) === "pt") {
                      result2 = "pt";
                      advance(pos, 2);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"pt\"");
                      }
                    }
                    if (result2 === null) {
                      if (input.substr(pos.offset, 2) === "pc") {
                        result2 = "pc";
                        advance(pos, 2);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"pc\"");
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, unit) {
        		return new clasp.model.Length(pre, value, unit)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ems() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "em") {
              result2 = "em";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"em\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, unit) {
        		return new clasp.model.Ems(pre, value, unit)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_exs() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "ex") {
              result2 = "ex";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"ex\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, unit) {
        		return new clasp.model.Exs(pre, value, unit)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_angle() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "deg") {
              result2 = "deg";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"deg\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 3) === "rad") {
                result2 = "rad";
                advance(pos, 3);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"rad\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 4) === "grad") {
                  result2 = "grad";
                  advance(pos, 4);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"grad\"");
                  }
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, unit) {
        		return new clasp.model.Angle(pre, value, unit)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_time() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 115) {
              result2 = "s";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"s\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "ms") {
                result2 = "ms";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ms\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, unit) {
        		return new clasp.model.Time(pre, value, unit)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_freq() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "Hz") {
              result2 = "Hz";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"Hz\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 3) === "kHz") {
                result2 = "kHz";
                advance(pos, 3);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"kHz\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value, unit) {
        		return new clasp.model.Frequency(pre, value, unit)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_NUMBER();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.Number(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_function() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          result1 = parse_paren_open();
          if (result1 !== null) {
            result2 = parse_expr();
            if (result2 !== null) {
              result3 = parse_paren_close();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, paren_open, expr, paren_close) {
        		return new clasp.model.Function(name, paren_open, expr, paren_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_string() {
        var result0;
        
        result0 = parse_string_1();
        if (result0 === null) {
          result0 = parse_string_2();
        }
        return result0;
      }
      
      function parse_string_1() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 34) {
            result1 = "\"";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[\t !#$%&(-~]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[\\t !#$%&(-~]");
              }
            }
            if (result3 === null) {
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 92) {
                result3 = "\\";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_nl();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 === null) {
                if (input.charCodeAt(pos.offset) === 39) {
                  result3 = "'";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"'\"");
                  }
                }
                if (result3 === null) {
                  result3 = parse_nonascii();
                  if (result3 === null) {
                    result3 = parse_escape();
                  }
                }
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[\t !#$%&(-~]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\t !#$%&(-~]");
                }
              }
              if (result3 === null) {
                pos2 = clone(pos);
                if (input.charCodeAt(pos.offset) === 92) {
                  result3 = "\\";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_nl();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
                if (result3 === null) {
                  if (input.charCodeAt(pos.offset) === 39) {
                    result3 = "'";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"'\"");
                    }
                  }
                  if (result3 === null) {
                    result3 = parse_nonascii();
                    if (result3 === null) {
                      result3 = parse_escape();
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 34) {
                result3 = "\"";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, quote, value) { return new clasp.model.String(pre, quote, value.join('')) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_string_2() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 39) {
            result1 = "'";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[\t !#$%&(-~]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[\\t !#$%&(-~]");
              }
            }
            if (result3 === null) {
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 92) {
                result3 = "\\";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_nl();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 === null) {
                if (input.charCodeAt(pos.offset) === 34) {
                  result3 = "\"";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result3 === null) {
                  result3 = parse_nonascii();
                  if (result3 === null) {
                    result3 = parse_escape();
                  }
                }
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[\t !#$%&(-~]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\t !#$%&(-~]");
                }
              }
              if (result3 === null) {
                pos2 = clone(pos);
                if (input.charCodeAt(pos.offset) === 92) {
                  result3 = "\\";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_nl();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
                if (result3 === null) {
                  if (input.charCodeAt(pos.offset) === 34) {
                    result3 = "\"";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\"\"");
                    }
                  }
                  if (result3 === null) {
                    result3 = parse_nonascii();
                    if (result3 === null) {
                      result3 = parse_escape();
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 39) {
                result3 = "'";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, quote, value) { return new clasp.model.String(pre, quote, value.join('')) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, value) {
        		return new clasp.model.Identifier(pre, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_uri() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "url") {
            result1 = "url";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"url\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_paren_open();
            if (result2 !== null) {
              result3 = parse_string();
              if (result3 === null) {
                result3 = parse_url();
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_paren_close();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, paren_open, value, paren_close) {
        		return new clasp.model.URI(pre, prefix, paren_open, value, paren_close)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_url() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (/^[!#$%&*-~]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[!#$%&*-~]");
            }
          }
          if (result2 === null) {
            result2 = parse_nonascii();
            if (result2 === null) {
              result2 = parse_escape();
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[!#$%&*-~]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[!#$%&*-~]");
                }
              }
              if (result2 === null) {
                result2 = parse_nonascii();
                if (result2 === null) {
                  result2 = parse_escape();
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, parts) { return new clasp.model.URL(pre, parts.join('')) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_unicoderange() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "U+") {
            result1 = "U+";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"U+\"");
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_h();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 63) {
                result4 = "?";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  if (input.charCodeAt(pos.offset) === 63) {
                    result4 = "?";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"?\"");
                    }
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 === null) {
              pos2 = clone(pos);
              result3 = parse_h();
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_h();
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 45) {
                  result3 = "-";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result3 !== null) {
                  result5 = parse_h();
                  if (result5 !== null) {
                    result4 = [];
                    while (result5 !== null) {
                      result4.push(result5);
                      result5 = parse_h();
                    }
                  } else {
                    result4 = null;
                  }
                  if (result4 !== null) {
                    result2 = [result2, result3, result4];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, value) {
        		return new clasp.model.UnicodeRange(pre, prefix, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hexcolor() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 35) {
            result1 = "#";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, prefix, value) {
        		return new clasp.model.HexColor(pre, prefix, value)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_brace_open() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 123) {
            result1 = "{";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, brace) {
        		return new clasp.model.BraceOpen(pre, brace)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_brace_close() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 125) {
            result1 = "}";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"}\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, brace) {
        		return new clasp.model.BraceClose(pre, brace)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bracket_open() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 91) {
            result1 = "[";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, bracket) {
        		return new clasp.model.BracketOpen(pre, bracket)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bracket_close() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 93) {
            result1 = "]";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"]\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, bracket) {
        		return new clasp.model.BracketClose(pre, bracket)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_paren_open() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 40) {
            result1 = "(";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, paren) {
        		return new clasp.model.ParenOpen(pre, paren)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_paren_close() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 41) {
            result1 = ")";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, paren) {
        		return new clasp.model.ParenClose(pre, paren)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_terminator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 59) {
            result1 = ";";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, terminator) {
        		return new clasp.model.Terminator(pre, terminator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_separator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 44) {
            result1 = ",";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, separator) {
        		return new clasp.model.Separator(pre, separator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_property_separator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ignore();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignore();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pre, separator) {
        		return new clasp.model.Separator(pre, separator)
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ignore() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_comment();
        if (result0 === null) {
          result0 = parse_S();
          if (result0 === null) {
            result0 = parse_CDO();
            if (result0 === null) {
              result0 = parse_CDC();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chunk) {
        		return new clasp.model.Ignore(chunk)
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^*]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^*]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^*]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^*]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 42) {
              result3 = "*";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (input.charCodeAt(pos.offset) === 42) {
                  result3 = "*";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = [];
              pos2 = clone(pos);
              if (/^[^\/*]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\/*]");
                }
              }
              if (result4 !== null) {
                result5 = [];
                if (/^[^*]/.test(input.charAt(pos.offset))) {
                  result6 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result6 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^*]");
                  }
                }
                while (result6 !== null) {
                  result5.push(result6);
                  if (/^[^*]/.test(input.charAt(pos.offset))) {
                    result6 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^*]");
                    }
                  }
                }
                if (result5 !== null) {
                  if (input.charCodeAt(pos.offset) === 42) {
                    result7 = "*";
                    advance(pos, 1);
                  } else {
                    result7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result7 !== null) {
                    result6 = [];
                    while (result7 !== null) {
                      result6.push(result7);
                      if (input.charCodeAt(pos.offset) === 42) {
                        result7 = "*";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }
                    }
                  } else {
                    result6 = null;
                  }
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = clone(pos);
                if (/^[^\/*]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\/*]");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  if (/^[^*]/.test(input.charAt(pos.offset))) {
                    result6 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^*]");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (/^[^*]/.test(input.charAt(pos.offset))) {
                      result6 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[^*]");
                      }
                    }
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 42) {
                      result7 = "*";
                      advance(pos, 1);
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        if (input.charCodeAt(pos.offset) === 42) {
                          result7 = "*";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"*\"");
                          }
                        }
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 47) {
                  result4 = "/";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, comment) {
        		return new clasp.model.Comment(recursive_join(comment))
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_required_space() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_S();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_S();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, space) {
        		return new clasp.model.RequiredSpace(space.join(''))
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_name() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_nmchar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_nmchar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) { return parts.join('') })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_nl() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 10) {
          result0 = "\n";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "\r\n") {
            result0 = "\r\n";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 13) {
              result0 = "\r";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 12) {
                result0 = "\f";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\f\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_nonascii() {
        var result0;
        
        if (/^[\x80-\xFF]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\x80-\\xFF]");
          }
        }
        return result0;
      }
      
      function parse_escape() {
        var result0, result1;
        var pos0;
        
        result0 = parse_unicode();
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (/^[ -~\x80-\xFF]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ -~\\x80-\\xFF]");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_w() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        if (/^[ \t\r\n\f]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n\\f]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t\r\n\f]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t\\r\\n\\f]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) { return parts.join('') })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_h() {
        var result0;
        
        if (/^[0-9a-f]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-f]");
          }
        }
        return result0;
      }
      
      function parse_nmchar() {
        var result0;
        
        if (/^[a-zA-Z0-9\-_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9\\-_]");
          }
        }
        if (result0 === null) {
          result0 = parse_nonascii();
          if (result0 === null) {
            result0 = parse_escape();
          }
        }
        return result0;
      }
      
      function parse_nmstart() {
        var result0;
        
        if (/^[a-zA-Z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result0 === null) {
          result0 = parse_nonascii();
          if (result0 === null) {
            result0 = parse_escape();
          }
        }
        return result0;
      }
      
      function parse_unicode() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 92) {
          result0 = "\\";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_h();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_h();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (/^[ \t\r\n\f]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n\\f]");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) { return recursive_join(parts) })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CHARSET_SYM() {
        var result0;
        
        if (input.substr(pos.offset, 8) === "@charset") {
          result0 = "@charset";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@charset\"");
          }
        }
        return result0;
      }
      
      function parse_IMPORT_SYM() {
        var result0;
        
        if (input.substr(pos.offset, 7) === "@import") {
          result0 = "@import";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@import\"");
          }
        }
        return result0;
      }
      
      function parse_NAMESPACE_SYM() {
        var result0;
        
        if (input.substr(pos.offset, 10) === "@namespace") {
          result0 = "@namespace";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@namespace\"");
          }
        }
        return result0;
      }
      
      function parse_MEDIA_SYM() {
        var result0;
        
        if (input.substr(pos.offset, 6) === "@media") {
          result0 = "@media";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@media\"");
          }
        }
        return result0;
      }
      
      function parse_PAGE_SYM() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "@page") {
          result0 = "@page";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@page\"");
          }
        }
        return result0;
      }
      
      function parse_FONT_FACE_SYM() {
        var result0;
        
        if (input.substr(pos.offset, 10) === "@font-face") {
          result0 = "@font-face";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@font-face\"");
          }
        }
        return result0;
      }
      
      function parse_IMPORTANT_SYM() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 33) {
          result0 = "!";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_w();
          if (result1 !== null) {
            if (input.substr(pos.offset, 9) === "important") {
              result2 = "important";
              advance(pos, 9);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"important\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NUMBER() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 === null) {
          pos1 = clone(pos);
          result0 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result1 = ".";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 !== null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 === null) {
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result0 = null;
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) { return recursive_join(parts) })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IDENT() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[\-*]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\-*]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_nmstart();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_nmchar();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_nmchar();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) { return recursive_join(parts) })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_S() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[ \t\r\n\f]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n\\f]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\r\n\f]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n\\f]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) { return parts.join('') })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CDO() {
        var result0;
        
        if (input.substr(pos.offset, 4) === "<!--") {
          result0 = "<!--";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<!--\"");
          }
        }
        return result0;
      }
      
      function parse_CDC() {
        var result0;
        
        if (input.substr(pos.offset, 3) === "-->") {
          result0 = "-->";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-->\"");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      	var recursive_join = function (parts)
      	{
      		var s = ''
      		
      		for (var i=0; i<parts.length; i++)
      		{
      			if (parts[i].constructor == Array)
      			{
      				s += recursive_join(parts[i])
      			}
      			else
      			{
      				s += parts[i]
      			}
      		}
      		
      		return s
      	}
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
